<table width="100%" summary="page for group_by {dplyr}"><tr><td>group_by {dplyr}</td><td style="text-align: right;">R Documentation</td></tr></table>

<h2>Group a tbl by one or more variables.</h2>

<h3>Description</h3>

<p>Most data operations are useful done on groups defined by variables in the
the dataset. The <code>group_by</code> function takes an existing tbl
and converts it into a grouped tbl where operations are performed
&quot;by group&quot;.
</p>


<h3>Usage</h3>

<pre>
group_by(.data, ..., add = FALSE)

group_by_(.data, ..., .dots, add = FALSE)
</pre>


<h3>Arguments</h3>

<table summary="R argblock">
<tr valign="top"><td><code>.data</code></td>
<td>
<p>a tbl</p>
</td></tr>
<tr valign="top"><td><code>...</code></td>
<td>
<p>variables to group by. All tbls accept variable names,
some will also accept functions of variables. Duplicated groups
will be silently dropped.</p>
</td></tr>
<tr valign="top"><td><code>add</code></td>
<td>
<p>By default, when <code>add = FALSE</code>, <code>group_by</code> will
override existing groups. To instead add to the existing groups,
use <code>add = TRUE</code></p>
</td></tr>
<tr valign="top"><td><code>.dots</code></td>
<td>
<p>Used to work around non-standard evaluation. See
<code>vignette("nse")</code> for details.</p>
</td></tr>
</table>


<h3>Tbl types</h3>

<p><code>group_by</code> is an S3 generic with methods for the three built-in
tbls. See the help for the corresponding classes and their manip
methods for more details:
</p>

<ul>
<li><p> data.frame: <a href="http://127.0.0.1:5678/library/dplyr/help/grouped_df">grouped_df</a>
</p>
</li>
<li><p> data.table: <a href="http://127.0.0.1:5678/library/dtplyr/html/grouped_dt.html">grouped_dt</a>
</p>
</li>
<li><p> SQLite: <code><a href="http://127.0.0.1:5678/library/dplyr/help/src_sqlite">src_sqlite</a></code>
</p>
</li>
<li><p> PostgreSQL: <code><a href="http://127.0.0.1:5678/library/dplyr/help/src_postgres">src_postgres</a></code>
</p>
</li>
<li><p> MySQL: <code><a href="http://127.0.0.1:5678/library/dplyr/help/src_mysql">src_mysql</a></code>
</p>
</li></ul>



<h3>See Also</h3>

<p><code><a href="http://127.0.0.1:5678/library/dplyr/help/ungroup">ungroup</a></code> for the inverse operation,
<code><a href="http://127.0.0.1:5678/library/dplyr/help/groups">groups</a></code> for accessors that don't do special evaluation.
</p>


<h3>Examples</h3>

<pre>
by_cyl &lt;- group_by(mtcars, cyl)
summarise(by_cyl, mean(disp), mean(hp))
filter(by_cyl, disp == max(disp))

# summarise peels off a single layer of grouping
by_vs_am &lt;- group_by(mtcars, vs, am)
by_vs &lt;- summarise(by_vs_am, n = n())
by_vs
summarise(by_vs, n = sum(n))
# use ungroup() to remove if not wanted
summarise(ungroup(by_vs), n = sum(n))

# You can group by expressions: this is just short-hand for
# a mutate/rename followed by a simple group_by
group_by(mtcars, vsam = vs + am)
group_by(mtcars, vs2 = vs)

# You can also group by a constant, but it's not very useful
group_by(mtcars, "vs")

# By default, group_by sets groups. Use add = TRUE to add groups
groups(group_by(by_cyl, vs, am))
groups(group_by(by_cyl, vs, am, add = TRUE))

# Duplicate groups are silently dropped
groups(group_by(by_cyl, cyl, cyl))
</pre>

<hr /><div style="text-align: center;">[Package <em>dplyr</em> version 0.5.0 <a href="http://127.0.0.1:5678/library/dplyr/html/00Index.html">Index</a>]</div>
</body></html>