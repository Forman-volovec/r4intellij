dplyr::group_by<br>
<h2>Group a tbl by one or more variables.</h2><br>
<b><u>Usage:</u></b><br>
<code><br>
     group_by(.data, ..., add = FALSE)<br>
     <br>
     group_by_(.data, ..., .dots, add = FALSE)<br>
     </code><br>
<b><u>Description:</u></b><br>
<br>
     Most data operations are useful done on groups defined by<br>
     variables in the the dataset. The ‘group_by’ function takes an<br>
     existing tbl and converts it into a grouped tbl where operations<br>
     are performed "by group".<br>
<br>
<b><u>See Also:</u></b><br>
<br>
     ‘ungroup’ for the inverse operation, ‘groups’ for accessors that<br>
     don't do special evaluation.<br>
<br>
<b><u>Arguments:</u></b><br>
<br/> <br/><b>   .data:</b> a tbl <br/> <br/><b>     ...:</b> variables to group by. All tbls accept variable names, some <br/>          will also accept functions of variables. Duplicated groups <br/>          will be silently dropped. <br/> <br/><b>     add:</b> By default, when ‘add = FALSE’, ‘group_by’ will override <br/>          existing groups. To instead add to the existing groups, use <br/>          ‘add = TRUE’ <br/> <br/><b>   .dots:</b> Used to work around non-standard evaluation. See <br/>          ‘vignette("nse")’ for details. <br/> <br>
<b><u>Tbl types:</u></b><br>
<br>
     ‘group_by’ is an S3 generic with methods for the three built-in<br>
     tbls. See the help for the corresponding classes and their manip<br>
     methods for more details:<br>
<br>
        • data.frame: grouped_df<br>
<br>
        • data.table: grouped_dt<br>
<br>
        • SQLite: ‘src_sqlite’<br>
<br>
        • PostgreSQL: ‘src_postgres’<br>
<br>
        • MySQL: ‘src_mysql’<br>
<br>
<b><u>Examples:</u></b><br>
<code><br>
     by_cyl <- group_by(mtcars, cyl)<br>
     summarise(by_cyl, mean(disp), mean(hp))<br>
     filter(by_cyl, disp == max(disp))<br>
     <br>
     # summarise peels off a single layer of grouping<br>
     by_vs_am <- group_by(mtcars, vs, am)<br>
     by_vs <- summarise(by_vs_am, n = n())<br>
     by_vs<br>
     summarise(by_vs, n = sum(n))<br>
     # use ungroup() to remove if not wanted<br>
     summarise(ungroup(by_vs), n = sum(n))<br>
     <br>
     # You can group by expressions: this is just short-hand for<br>
     # a mutate/rename followed by a simple group_by<br>
     group_by(mtcars, vsam = vs + am)<br>
     group_by(mtcars, vs2 = vs)<br>
     <br>
     # You can also group by a constant, but it's not very useful<br>
     group_by(mtcars, "vs")<br>
     <br>
     # By default, group_by sets groups. Use add = TRUE to add groups<br>
     groups(group_by(by_cyl, vs, am))<br>
     groups(group_by(by_cyl, vs, am, add = TRUE))<br>
     <br>
     # Duplicate groups are silently dropped<br>
     groups(group_by(by_cyl, cyl, cyl))<br>
     </code>